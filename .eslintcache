[{"/Users/owner/Code/northone-graphql/src/index.js":"1","/Users/owner/Code/northone-graphql/src/App.js":"2","/Users/owner/Code/northone-graphql/src/redux/store/index.js":"3","/Users/owner/Code/northone-graphql/src/components/todo.component.js":"4","/Users/owner/Code/northone-graphql/src/components/add-todo.component.js":"5","/Users/owner/Code/northone-graphql/src/components/todos-list.component.js":"6","/Users/owner/Code/northone-graphql/src/redux/saga/api-sagas.js":"7","/Users/owner/Code/northone-graphql/src/redux/actions/index.js":"8","/Users/owner/Code/northone-graphql/src/redux/services/todo.service.js":"9","/Users/owner/Code/northone-graphql/src/redux/constants/action.types.js":"10","/Users/owner/Code/northone-graphql/src/redux/reducers/index.js":"11","/Users/owner/Code/northone-graphql/src/queries/index.js":"12","/Users/owner/Code/northone-graphql/src/redux/selectors/index.js":"13","/Users/owner/Code/northone-graphql/src/redux/utils/index.js":"14","/Users/owner/Code/northone-graphql/src/http-common.js":"15"},{"size":798,"mtime":1713643562772,"results":"16","hashOfConfig":"17"},{"size":1938,"mtime":1713643754198,"results":"18","hashOfConfig":"17"},{"size":707,"mtime":1612802080961,"results":"19","hashOfConfig":"17"},{"size":4690,"mtime":1713706846439,"results":"20","hashOfConfig":"17"},{"size":3674,"mtime":1713706661222,"results":"21","hashOfConfig":"17"},{"size":6717,"mtime":1713826709925,"results":"22","hashOfConfig":"17"},{"size":5771,"mtime":1614871418817,"results":"23","hashOfConfig":"17"},{"size":3261,"mtime":1614787865674,"results":"24","hashOfConfig":"17"},{"size":569,"mtime":1612738052747,"results":"25","hashOfConfig":"17"},{"size":1649,"mtime":1614789535364,"results":"26","hashOfConfig":"17"},{"size":3392,"mtime":1713825529106,"results":"27","hashOfConfig":"17"},{"size":2263,"mtime":1713813947377,"results":"28","hashOfConfig":"17"},{"size":872,"mtime":1614731926795,"results":"29","hashOfConfig":"17"},{"size":795,"mtime":1612802080961,"results":"30","hashOfConfig":"17"},{"size":173,"mtime":1615083667823,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1kd5zef",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/owner/Code/northone-graphql/src/index.js",[],["66","67"],"/Users/owner/Code/northone-graphql/src/App.js",["68"],"import { Switch, Route, Link, Routes } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { faHome, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport { setSubmitted, setMessage } from \"./redux/actions\";\nimport AddTodo from \"./components/add-todo.component\";\nimport Todo from \"./components/todo.component\";\nimport TodosList from \"./components/todos-list.component\";\n\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const initializeTodoToAdd = () => {\n    dispatch(setSubmitted(false));\n    dispatch(setMessage(\"\"));\n  };\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <a href=\"/\" className=\"navbar-brand\">\n          <FontAwesomeIcon icon={faHome} />\n        </a>\n\n        <div className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <Link to={\"/\"} className=\"nav-link\">\n              To Do List\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link\n              to={\"/add\"}\n              className=\"nav-link\"\n              onClick={() => initializeTodoToAdd()}\n            >\n              Add{' '}<FontAwesomeIcon icon={faPlus} />\n            </Link>\n          </li>\n        </div>\n      </nav>\n\n      <div className=\"container mt-3\">\n        {/* <Switch>\n         */}\n         <Routes>\n          {/* <Route exact path={[\"/\", \"/todos\"]} component={TodosList} />\n          <Route exact path=\"/add\" component={AddTodo} />\n          <Route path=\"/todos/:id\" component={Todo} /> */}\n\n          <Route exact path=\"/\" element={<TodosList />} />\n          <Route exact path=\"/add\" element={<AddTodo />} />\n          <Route path=\"/todos/:id\" element={<Todo />} />\n\n          </Routes>\n        {/* </Switch> */}\n      </div>\n    </div>\n  );\n};\n\nexport default App;","/Users/owner/Code/northone-graphql/src/redux/store/index.js",[],"/Users/owner/Code/northone-graphql/src/components/todo.component.js",["69"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport DatePicker from \"react-date-picker\";\nimport { useNavigate } from \"react-router-dom\";\nimport { setCurrentTodo, setMessage } from \"../redux/actions\";\nimport { selectCurrentTodo, selectMessage } from \"../redux/selectors\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { EDIT_TODO, DELETE_TODO, GET_TODOS } from \"../queries\";\n\nconst Todo = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const currentTodo = useSelector(selectCurrentTodo);\n  const message = useSelector(selectMessage);\n  const [dateValue, onChange] = useState(\n    new Date(\n      currentTodo && currentTodo.dueDate ? currentTodo.dueDate : new Date()\n    )\n  );\n\n  const [updateTodo] = useMutation(EDIT_TODO, {\n    refetchQueries: [{ query: GET_TODOS }],\n  });\n  const [deleteTodo] = useMutation(DELETE_TODO, {\n    refetchQueries: [{ query: GET_TODOS }],\n  });\n\n  useEffect(() => {\n    clearMessage();\n    checkLocalStorage();\n  }, []);\n\n  const clearMessage = () => dispatch(setMessage(\"\"));\n\n  const checkLocalStorage = () => {\n    if (!currentTodo) {\n      let todo = localStorage.getItem(\"currentTodo\");\n      dispatch(setCurrentTodo(JSON.parse(todo)));\n    }\n  };\n\n  const handleInputChange = (event) => {\n    event.preventDefault(); // prevent a browser reload/refresh\n    const { name, value } = event.target;\n    dispatch(setCurrentTodo({ ...currentTodo, [name]: value }));\n  };\n\n  const updateTodoUnderEdit = (status = null) => {\n    currentTodo.dueDate = dateValue;\n    if (status !== null) {\n      currentTodo.status = status;\n    }\n    updateTodo({\n      variables: {\n        id: currentTodo._id,\n        title: currentTodo.title,\n        description: currentTodo.description,\n        status: currentTodo.status,\n        dueDate: currentTodo.dueDate,\n      },\n    });\n    navigate(\"/\");\n  };\n\n  const deleteTodoUnderEdit = () => {\n    deleteTodo({ variables: { id: currentTodo._id } });\n    navigate(\"/\");\n  };\n\n  return (\n    <div>\n      {currentTodo ? (\n        <div className=\"edit-form\">\n          <h4>To Do</h4>\n          <form>\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">\n                <strong>Title:</strong>\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"title\"\n                name=\"title\"\n                value={currentTodo.title}\n                onChange={(currentTodo) => handleInputChange(currentTodo)}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"description\">\n                <strong>Description:</strong>\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"description\"\n                name=\"description\"\n                value={currentTodo.description}\n                onChange={(currentTodo) => handleInputChange(currentTodo)}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>\n                <strong>Status:</strong>{\" \"}\n              </label>\n              {currentTodo.status ? \"Done\" : \"Pending\"}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"dueDate\">\n                <strong>Due Date:</strong>\n              </label>{\" \"}\n              <DatePicker onChange={onChange} value={dateValue} />\n            </div>\n          </form>\n\n          {currentTodo.status ? (\n            <button\n              className=\"btn btn-primary mr-2\"\n              onClick={() => updateTodoUnderEdit(false)}\n            >\n              Mark Pending\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-primary mr-2\"\n              onClick={() => updateTodoUnderEdit(true)}\n            >\n              Mark Done\n            </button>\n          )}\n\n          <button\n            className=\"btn btn-danger mr-2\"\n            onClick={() => deleteTodoUnderEdit()}\n          >\n            Delete <FontAwesomeIcon icon={faTrash} />\n          </button>\n\n          <button\n            type=\"submit\"\n            className=\"btn btn-success mr-2\"\n            onClick={() => updateTodoUnderEdit()}\n          >\n            Update\n          </button>\n          <p>{message}</p>\n        </div>\n      ) : (\n        <div>\n          <br />\n          <p>Please click on a \"To Do\"...</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Todo;\n","/Users/owner/Code/northone-graphql/src/components/add-todo.component.js",[],"/Users/owner/Code/northone-graphql/src/components/todos-list.component.js",["70"],"/Users/owner/Code/northone-graphql/src/redux/saga/api-sagas.js",[],"/Users/owner/Code/northone-graphql/src/redux/actions/index.js",[],"/Users/owner/Code/northone-graphql/src/redux/services/todo.service.js",["71"],"import http from \"../../http-common\";\n\nclass TodoDataService {\n  getTodos() {\n    return http.get(`/api/todos`);\n  }\n\n  getTodo(id) {\n    return http.get(`/api/todos/${id}`);\n  }\n\n  addTodo(data) {\n    return http.post(`/api/todos`, data);\n  }\n\n  updateTodo(id, data) {\n    return http.put(`/api/todos/${id}`, data);\n  }\n\n  deleteTodo(id) {\n    return http.delete(`/api/todos/${id}`);\n  }\n\n  deleteTodos() {\n    return http.delete(`/api/todos`);\n  }\n\n  findByTitle(title) {\n    return http.get(`/api/todos?title=${title}`);\n  }\n}\n\nexport default new TodoDataService();\n","/Users/owner/Code/northone-graphql/src/redux/constants/action.types.js",[],"/Users/owner/Code/northone-graphql/src/redux/reducers/index.js",[],"/Users/owner/Code/northone-graphql/src/queries/index.js",[],"/Users/owner/Code/northone-graphql/src/redux/selectors/index.js",[],"/Users/owner/Code/northone-graphql/src/redux/utils/index.js",[],"/Users/owner/Code/northone-graphql/src/http-common.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":10,"nodeType":"78","messageId":"79","endLine":1,"endColumn":16},{"ruleId":"80","severity":1,"message":"81","line":33,"column":6,"nodeType":"82","endLine":33,"endColumn":8,"suggestions":"83"},{"ruleId":"76","severity":1,"message":"84","line":15,"column":3,"nodeType":"78","messageId":"79","endLine":15,"endColumn":14},{"ruleId":"85","severity":1,"message":"86","line":33,"column":1,"nodeType":"87","endLine":33,"endColumn":38},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkLocalStorage' and 'clearMessage'. Either include them or remove the dependency array.","ArrayExpression",["90"],"'findByTitle' is defined but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [checkLocalStorage, clearMessage]",{"range":"93","text":"94"},[1179,1181],"[checkLocalStorage, clearMessage]"]